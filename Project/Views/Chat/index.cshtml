<!DOCTYPE html>
<html>
<head>
    <title>pChat &mdash; Private Chatroom</title>
    <link rel="stylesheet" href="@Url.Content("~/css/StyleSheet.css")">
    <link rel="stylesheet" href="@Url.Content("~/css/app.css")">
</head>
<body>

    <div class="containerr-child my-4 border-bottom">
        <nav class="navv">
            <div class="navbar-header">
                <p class="" style="font-size:large">Wiadomości - @ViewBag.currentUser.Login </p>
            </div>
        </nav>
    </div>   
    <div class="row">
        <div class="container">
            <div class="col-sm-12 col-md-3 " style="font-size:14px; ">
                <div class="main visible-md visible-lg visible-sm"style="height:100%;">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="panel panel-default users__bar">
                                <div class="panel-heading users__heading">
                                    Contacts (@ViewBag.allUsers.Count)
                                </div>
                                <div class="__no__chat__">
                                    <p>Select a contact to chat with</p>
                                </div>
                                <div class="panel-body users__body" style="max-height:80%; overflow:auto;">
                                    <ul id="contacts" class="list-group">

                                        @foreach (var user in @ViewBag.allUsers)
                                        {
                                            <a class="user__item contact-@user.UserID" href="#" data-contact-id="@user.UserID" data-contact-name="@user.Name" data-contact-surname="@user.Surname">
                                                <li>
                                                    <div class="avatar">
                                                        <img src="~/no_avatar.png" height="50" width="50">
                                                    </div>
                                                    <span>@user.Name</span>
                                                    <span>@user.Surname</span>
                                                    <div class="status-bar"></div>
                                                </li>
                                            </a>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-md-9 chat__body">
                <div class="row" style="height:65vh;">

                    <div class="col-sm-12" style="overflow:auto;max-height:58vh;">
                        <ul class="list-group chat__main">
                        </ul>
                    </div>

                    <div class="chat__type__body">
                        <div class="chat__type">
                            <textarea id="msg_box" placeholder="Type your message"></textarea>
                            <button class="btn btn-dark chat-btn" id="sendMessage">Send</button>
                        </div>
                    </div>
                    <div class="chat__typing">
                        <span id="typerDisplay"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="@Url.Content("~/js/app.js")" type="text/javascript"></script>
    <script src="https://js.pusher.com/4.0/pusher.min.js" type="text/javascript"></script>
    <script type="text/javascript">
   //////////// Variable Instantiation
            function throttle(callback, wait, context = this) {
  let timeout = null
  let callbackArgs = null

  const later = () => {
    callback.apply(context, callbackArgs)
    timeout = null
  }

  return function() {
    if (!timeout) {
      callbackArgs = arguments
      timeout = setTimeout(later, wait)
    }
  }
}


            //Pusher client side setup
            const pusher = new Pusher('904061',{
                cluster:'eu'
            });
            pusher.connection.bind('connected', function() {
            socketId = pusher.connection.socket_id;
        });
        let currentContact = null; // Holds contact currently being chatted with
        let selectedContact = null;
        let socketId = null;
        let currentconversationChannel = null;//pusher.subscribe('chat-' + @ViewBag.currentUser.UserID );
        let conversationChannelName = null;
        let newMessageTpl =
        `<div>
            <div id="msg-{{id}}" class="row __chat__par__">
                <div class="__chat__ ">
                <p>{{body}}</p>
                <p class="delivery-status">Delivered</p>
                </div>
            </div>
            </div>`;
    /////////////////////////////////
        const chatAppChannel = pusher.subscribe('presence-chat');
        chatAppChannel.bind("pusher:subscription_succeeded", function(members) {

            members.each(function(member) {
                setContactStatus(member.info.id, 1);
            });
        });
        chatAppChannel.bind("pusher:member_added", function(member){
            setContactStatus(member.info.id, 1);
        });
        chatAppChannel.bind("pusher:member_removed", function(member){
            setContactStatus(member.info.id, 0);
        });
        function setContactStatus( contact_id, status ) {
            var contactObj = $('#contacts .contact-' + contact_id);
            if ( status ) {
                contactObj.find('.status-bar').addClass('active');
            } else {
                contactObj.find('.status-bar').removeClass('active');
            }
        }
        function displayMessage(message_obj) {

            const msg_id = message_obj.MessageID||message_obj.messageID;
            const msg_body = message_obj.Message||message_obj.message;
            let template = $(newMessageTpl).html();
            template = template.replace("{{id}}", msg_id);
            template = template.replace("{{body}}", msg_body);
            template = $(template);
            if ( message_obj.UserSenderID == @ViewBag.currentUser.UserID||message_obj.userSenderID == @ViewBag.currentUser.UserID ) {
                template.find('.__chat__').addClass('receive__chat');
            } else {
                template.find('.__chat__').addClass('from__chat');
            }
            if ( message_obj.status == 1 ) {
                template.find('.delivery-status').show();
            }
            $('.chat__main').append(template);
        }
        // get chat data
        function getChat( contact_id ) {
            $.get("/contact/conversations/" + contact_id )
                .done(function (resp) {

                    let chat_data = new Array(resp.data.length);
                    chat_data.fill(0);
                    for (let i = 0; i < resp.data.length; i++) {
                        chat_data[i] = resp.data[i];
                    }
                    chat_data;
               // chat_data = resp.data ;
                loadChat( chat_data );
                });
        }

        //load chat data into view
        function loadChat(chat_data) {
            $('.chat__main').empty();
            chat_data.forEach(function (data) {

                displayMessage(data);
            });

            $('.chat__body').show();
            $('.__no__chat__').hide();
            $('.panel-body').css('max-height','87%')
        }
        // select contact to chat with
        $('.user__item').click( function(e) {
            e.preventDefault();

            currentContact = {
                id: $(this).data('contact-id'),
                
            };
            console.log(currentContact);
            if ( conversationChannelName ) {
                pusher.unsubscribe( conversationChannelName );
            }
            conversationChannelName = getConvoChannel( (@ViewBag.currentUser.UserID * 1) ,  (currentContact.id * 1) );
            currentconversationChannel = pusher.subscribe(conversationChannelName);
            bind_client_events();

            $('#contacts').find('li').removeClass('active');
            $('#contacts .contact-' + currentContact.id).find('li').addClass('active');
            getChat(currentContact.id);
        });
        function getConvoChannel(user_id, contact_id) {
            if ( user_id > contact_id ) {
                return 'private-chat-' + contact_id + '-' + user_id;
            }
            return 'private-chat-' + user_id + '-' + contact_id;
        }
        //User is typing
        var isTypingCallback = throttle(function() {
            currentconversationChannel.trigger("client-is-typing", {
                user_id: @ViewBag.currentUser.UserID,
                contact_id: currentContact.id,
            });
        }, 1000);
        $('#msg_box').on('keyup',isTypingCallback);
        ///////////////////Sending Messages/////////////////////
        $('#sendMessage').click(function () {
            if ($('#msg_box').val() === "") { return;}
            $.post("/send_message", {
                Message: $('#msg_box').val(),
                contact: currentContact.id,
                socket_id: socketId,
            }).done(function (data) {
                let obj = {};
                obj = data;
                displayMessage(data);
                $('#msg_box').val('');
            });
        });
        function bind_client_events(){
            currentconversationChannel.bind("client-is-typing", function(data) {
                if ( data.user_id == currentContact.id && data.contact_id == @ViewBag.currentUser.UserID  ) {
                    $('#typerDisplay').text( currentContact.name + ' is typing...');

                    $('.chat__typing').fadeIn(100, function() {
                        $('.chat__type__body').addClass('typing_display__open');
                    }).delay(1000).fadeOut(300, function(){
                        $('.chat__type__body').removeClass('typing_display__open');
                    });
                }
            });
            currentconversationChannel.bind("new_message", function(msg) {
                    if ( msg.receiver_id == @ViewBag.currentUser.UserID ) {
                    displayMessage(msg);
                    }
                    $.post("/message_delivered/" + msg.id, {
                    socket_id: socketId,
                    });
            });
            currentconversationChannel.bind("message_delivered", function(msg) {
                $('#msg-' + msg.id).find('.delivery-status').show();
            });
        }

        if (@ViewBag.selectedUser.UserID!= 0) {
            function onload() {


                currentContact = {
                    id: @ViewBag.selectedUser.UserID,
                  
                   
                };

                if (conversationChannelName) {
                    pusher.unsubscribe(conversationChannelName);
                }
                conversationChannelName = getConvoChannel((@ViewBag.currentUser.UserID * 1), (currentContact.id * 1));
                currentconversationChannel = pusher.subscribe(conversationChannelName);
                bind_client_events();

                $('#contacts').find('li').removeClass('active');
                $('#contacts .contact-' + currentContact.id).find('li').addClass('active');
                getChat(currentContact.id);

            };
        }
    </script>



</body>
</html>




